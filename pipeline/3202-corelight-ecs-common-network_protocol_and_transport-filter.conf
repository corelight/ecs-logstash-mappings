# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" {
    
    # Lowercase [network][protocol] for continuity
    if [network][protocol] {
    
      mutate {
        lowercase => [ "[network][protocol]" ]
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-mutate-42da94b8eebb-2023120101"
        }
        tag_on_failure => "_mutate_error-42da94b8eebb-2023120101"
        id => "filter-mutate-42da94b8eebb"
      }
    }
    # Set [network][transport] based on values from within the log
    if ![network][transport] {
    
      # Set [network][transport] via [labels][corelight][event_sub_type] first
      # UDP
      if [labels][corelight][event_sub_type] in [ "dhcp", "gquic", "quic", "ntp", "radius", "sip", "snmp", "wireguard" ] {
        mutate {
          add_field => {
            "[network][transport]" => "udp"
            "[@metadata][etl][pipeline]" => "filter-mutate-dd83077e3a00-2023120101"
          }
          tag_on_failure => "_mutate_error-dd83077e3a00-2023120101"
          id => "filter-mutate-dd83077e3a00"
        }
      }
      # TCP
      # SSL should technically not be inferred as TCP, but for continuity continue.. 
      # HTTP should technically not be inferred as TCP, but for continuity continue.. Plus QUIC which is UDP HTTP is a seperate log. so can infer it 
      else if [labels][corelight][event_sub_type] in [ "dce_rpc", "ftp", "http", "http_red", "http2", "irc", "kerberos", "mqtt_connect", "mqtt_publish", "mqtt_subscribe", "mqtt", "ntlm", "pop3", "rfb", "sip", "smb_files", "smb_mapping", "smtp", "snmp", "socks", "ssh", "ssl", "ssl_red", "stepping" ] {
        mutate {
          add_field => {
            "[network][transport]" => "tcp"
            "[@metadata][etl][pipeline]" => "filter-mutate-98d5e7b74d51-2023120101"
          }
          tag_on_failure => "_mutate_error-98d5e7b74d51-2023120101"
          id => "filter-mutate-98d5e7b74d51"
        }
      }
      
      # If [network][transport] still not set, use [network][protocol]
      if ![network][transport] {
        ruby {
          code => '
            network_protocol = event.get("[network][protocol]")
            tcp_protocol = [
              "dce_rpc",
              "ftp",
              "http",
              "irc",
              "kerberos",
              "mqtt_connect",
              "mqtt_publish",
              "mqtt_subscribe",
              "mqtt",
              "ntlm",
              "pop3",
              "rfb",
              "sip",
              "smb_files",
              "smb_mapping",
              "smtp",
              "snmp",
              "socks",
              "ssh",
              "ssl",
              "stepping"
            ]
            udp_protocol = [
              "dhcp",
              "gquic",
              "ntp",
              "radius",
              "sip",
              "snmp",
              "wireguard"
            ]
            if network_protocol.is_a?(Array)
              if network_protocol.length() == 1
                net_proto = network_protocol.first.to_s
              end
            end
                
            if tcp_protocol.include?(net_proto)
              event.set("[network][transport]", "tcp")
            elsif udp_protocol.include?(net_proto)
              event.set("[network][transport]", "udp")
            end
          '
          add_field =>  {
            "[@metadata][etl][pipeline]" => "filter-ruby-8e2b1bb39a1c-2023120101"
          }
          tag_on_exception =>  "_rubyexception-8e2b1bb39a1c-2023120101"
          tag_with_exception_message => true
          id => "filter-ruby-8e2b1bb39a1c"
        }
      }
      
    }     
  }
}
