# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ( [labels][corelight][event_sub_type] == "dns" or [labels][corelight][event_sub_type] == "dns_agg" or [labels][corelight][event_sub_type] == "dns_red" ) {
    mutate {
      update => {
        "[event][kind]" => "event"
        "[event][category]" => "network"
        "[event][type]" => [ "connection", "info", "protocol" ]
        "[labels][corelight][event_category]" => "network_protocols"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CL_DS_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CL_DS_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "VAR_CL_DS_SUFFIX_PROTOCOL_LOG_DNS"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CL_DS_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "addl" => "[dns][additionals][name]"
        "answers" => "[dns][answers][name]"
        "auth" => "[dns][additionals][authoritative][name]"
        "qclass" => "[dns][op][class_code]"
        "qclass_name" => "[dns][question][class]"
        "qtype" => "[dns][question][type_code]"
        "qtype_name" => "[dns][question][type]"
        "query" => "[dns][question][name]"
        "rcode" => "[dns][status_code]"
        "rcode_name" => "[dns][response_code]"
        "rtt" => "[dns][rtt]"
        "trans_id" => "[dns][id]"
        "TTLs" => "[dns][answers][ttl]"
        "ts_last" => "[corelight][ts_last]"
      }
      replace => {
        "[network][protocol]" => "dns"
      }
      copy => {
        "[dns][question][name]" => "[destination][domain]"
        "[dns][rtt]" => "[event][duration]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-e98caa7068b3-main-dns-2023120101"
      }
      tag_on_failure => "_mutate_error-e98caa7068b3-2023120101"
      id => "filter-mutate-e98caa7068b3"
    }

    ruby {
      code => '
        value = event.get("AA")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[dns][flags][authoritative]", value.to_s.strip.downcase)
        end
        value = event.get("RA")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[dns][flags][recursion][available]", value.to_s.strip.downcase)
        end
        value = event.get("RD")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[dns][flags][recursion][desired]", value.to_s.strip.downcase)
        end
        value = event.get("TC")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[dns][flags][truncated][response]", value.to_s.strip.downcase)
        end
        value = event.get("rejected")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[dns][flags][rejected]", value.to_s.strip.downcase)
        end
        value = event.get("Z")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[dns][flags][z_bit]", value.to_s.strip.downcase)
        end
      '
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-ruby-b827825c89e0-2023120101"
      }
      remove_field => [ "AA", "RA", "RD", "TC", "rejected", "Z" ]
      tag_on_exception => "_rubyexception-b827825c89e0-2023120101"
      tag_with_exception_message => true
      id => "filter-ruby-b827825c89e0"
    }

    # DNS Flag AA
    if [dns][flags][authoritative] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "AA"
          "[@metadata][etl][pipeline]" => "filter-mutate-0697a2be3a55-2023120101"
        }
        tag_on_failure => "_mutate_error-0697a2be3a55-2023120101"
        id => "filter-mutate-0697a2be3a55"
      }
    }

    # DNS Flag RA
    if [dns][flags][recursion][available] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "RA"
          "[@metadata][etl][pipeline]" => "filter-mutate-9e8d9aaf98ca-2023120101"
        }
        tag_on_failure => "_mutate_error-9e8d9aaf98ca-2023120101"
        id => "filter-mutate-9e8d9aaf98ca"
      }
    }

    # DNS Flag RD
    if [dns][flags][recursion][desired] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "RD"
          "[@metadata][etl][pipeline]" => "filter-mutate-64f1b1dcc551-2023120101"
        }
        tag_on_failure => "_mutate_error-64f1b1dcc551-2023120101"
        id => "filter-mutate-64f1b1dcc551"
      }
    }

    # DNS Flag TC
    if [dns][flags][truncated][response] == "true" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "TC"
          "[@metadata][etl][pipeline]" => "filter-mutate-89f1b2973a90-2023120101"
        }
        tag_on_failure => "_mutate_error-89f1b2973a90-2023120101"
        id => "filter-mutate-89f1b2973a90"
      }
    }

    # DNS Flag Z-Bit
    if [dns][flags][z_bit] and [dns][flags][z_bit] != "0" {
      mutate { 
        add_field => {
          "[dns][header_flags]" => "Z"
          "[@metadata][etl][pipeline]" => "filter-mutate-4e320200150b-2023120101"
        }
        tag_on_failure => "_mutate_error-4e320200150b-2023120101"
        id => "filter-mutate-4e320200150b"
      }
    }

    # Event outcome
    if [dns][flags][rejected] in [ "true", "false" ] {
      translate {
        field => "[dns][flags][rejected]"
        exact => true
        dictionary => [
          "false", "success",
          "true", "failure"
        ]
        destination => "[event][outcome]"
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-translate-8a01ef3f6615-2023120101"
        }
        id => "filter-translate-8a01ef3f6615"
      }
    }
    # Event duration
    ruby {
      code => '
        event_duration = event.get("[event][duration]")
        duration = event_duration.to_f * 1000000000
        event.set("[event][duration]", duration)
      '
      add_field =>  {
        "[@metadata][etl][pipeline]" => "filter-ruby-889157cb56d4-2023120101"
      }
      tag_on_exception => "_rubyexception-889157cb56d4-event.duration_to_nanoseconds-2023120101"
      tag_with_exception_message => true
      id => "filter-ruby-889157cb56d4"
    }

  }
}
