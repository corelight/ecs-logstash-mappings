# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" { 

    # If [source][ip] field exists from previous config settings
    if [source][ip] {
      # Make sure IP is valid, rfc check, private/public, and cleanup common things like preceding "0" and or file share/path "\"
      # Also determine if IPv4 or IPv6
      ruby {
        init => '
          require "ipaddr"
          IPv6Privatecidr = [ "fc00::/7", "fe80::/10", "ff00::/8", "2001:db8::/32", "2001:20::/28", "::1/128", "::/128", "100::/64", "64:ff9b::/96" ]
        '
        code => '
          # Author: Nate Guagenti (@neu5ron)
          # Set field names
          parent_nested_field_name = "[source]"
          orig_ip_address_nested_field_name = "#{parent_nested_field_name}[ip]"
          is_ipv6_nested_field_name = "#{parent_nested_field_name}[is_ipv6]"
          # Get values
          ip_addresses= event.get("#{orig_ip_address_nested_field_name}")
          ip_addresses_is_ipv6 = event.get("#{is_ipv6_nested_field_name}")
          # Check if IPv6 determination is already made
          if ip_addresses_is_ipv6.nil?
            ip_addresses_is_ipv6 = Array.new
          else
            ip_addresses_is_ipv6 = [ ip_addresses_is_ipv6 ]
          end
          
          ip_addresses_public = Array.new
          ip_addresses_type = Array.new
          ip_addresses_rfc = Array.new
          ip_addresses_level_1n2_ip = Array.new
          not_ip_addresses = Array.new
          version_ip_addresses = Array.new
          clean_ip_addresses = Array.new
          
          # Determine if the IP field is an array if not make it an array for continuity
          if ip_addresses.is_a? Enumerable
            ip_addresses = ip_addresses.uniq
          else
            ip_addresses = [ ip_addresses ]
          end
          
          for ip_address in ip_addresses
            next if ip_address.nil?
            #### General Cleanup
            # Remove quoted
            ip_address = ip_address.delete("\'")
            ip_address = ip_address.delete("\"")
            # Remove ending "."
            ip_address = ip_address.chomp
            # Remove preceding "."# Do not ask.. reverse + chomp + reverse up to 16 times faster
            ip_address = ip_address.reverse.chomp(".").reverse
            # Remove ending or beginning whitespace
            ip_address = ip_address.lstrip.rstrip
            # Remove things that would make an IP a share but we want the IP :)
            ip_address = ip_address.gsub(/^\\:?/, "")
            # Downcase/lowercase for checking if possible ipv6
            ip_address = ip_address.downcase
          
            # IPv4
            ip_address_length = ip_address.length
            if !ip_address.include?(":") && !( /[a-z]/ === ip_address ) && ip_address_length <= 15 && ip_address_length >= 7
              # Remove any preceding zeroes in each octet
              octets = ip_address.split(".")
              first_part, second_part = nil, nil
              octets.each_with_index do |octet, index|
                octet = octet.to_i.to_s # Remove any preceding zeros
                first_part = octet if index == 0
                second_part = octet if index == 1
                octets[index] = octet
              end
              ip_address = octets.join(".")

              begin
                IPAddr.new(ip_address)
                # ip_address = IPAddr.new(ip_address)
                # IP Version 4 (ipv4)

                # Set 1st and 2nd Level Octet
                ip_addresses_level_1n2_ip.push([first_part, second_part].compact.join("."))
          
                # Private/RFC1918
                if ip_address.start_with?( "10.", "192.168." )
                  ip_public = "false"
                  ip_type = "private"
                  ip_rfc = "RFC_1918"
          
                # (Local)link-local RFC3927
                elsif ip_address.start_with?( "169.254." )
                  ip_public = "false"
                  ip_type = "local"
                  ip_rfc = "RFC_3927"
        
                # Loopback RFC1122-3.2.1.3
                elsif ip_address.start_with?( "127." )
                  ip_public = "false"
                  ip_type = "loopback"
                  ip_rfc = "RFC_1122-3.2.1.3"
          
                # This host on this network RFC_1122-3.2.1.3 (RFC6890)
                elsif ip_address.start_with?("0.")
                  if ip_address == "0.0.0.0"
                    ip_public = "false"
                    ip_type = "reserved_any_address"
                    ip_rfc = "RFC_1122-3.2.1.3"
                  else
                    ip_public = "false"
                    ip_type = "reserved_local_this_network"
                    ip_rfc = "RFC_1122-3.2.1.3"
                  end
          
                # IPv6 to IP4 anycast RFC3068
                elsif ip_address.start_with?( "192.88.99." )
                  ip_public = "false"
                  ip_type = "6to4"
                  ip_rfc = "RFC_3068"
        
                # IPv6 to IP4 anycast RFC7535
                elsif ip_address.start_with?( "192.31.196." )
                  ip_public = "false"
                  ip_type = "as112-v4"
                  ip_rfc = "RFC_7535"
          
                # IPv6 to IP4 anycast RFC7450, "Automatic Multicast Tunneling"
                elsif ip_address.start_with?( "192.52.193." )
                  ip_public = "false"
                  ip_type = "amt"
                  ip_rfc = "RFC_7450"

                ### Reserved RFC2544, RFC6890, RFC5737
                ## RFC2544
                # 198.18.0.0/15 benchmarking RFC_2544 198.18.0.0-198.19.255.255
                ## RFC5737
                # 192.0.2.0/24 documentation_test_net_1 RFC_5737
                # 198.51.100.0/24 documentation_test_net_2 RFC_5737
                # 203.0.113.0/24 documentation_test_net_3 RFC_5737
                ## RFC6890
                # 192.0.0.0/24 ietf_protocol_assignments RFC_6890-2.1
                ## Note
                # 192.0.1.0/24 is not listed in any RFCs although many say it is reserved

                # benchmarking TEST-NET-1 RFC_2544
                elsif ip_address.start_with?("198.18.", "198.19.")
                  ip_public = "false"
                  ip_type = "reserved_benchmarking"
                  ip_rfc = "RFC_2544"

                # Documentation TEST-NET-1 RFC_5737
                elsif ip_address.start_with?( "192.0.2." )
                  ip_public = "false"
                  ip_type = "reserved_documentation_test_net_1"
                  ip_rfc = "RFC_5737"

                # Documentation TEST-NET-2 RFC_5737
                elsif ip_address.start_with?( "198.51.100." )
                  ip_public = "false"
                  ip_type = "reserved_documentation_test_net_2"
                  ip_rfc = "RFC_5737"

                # Documentation TEST-NET-3 RFC_5737
                elsif ip_address.start_with?( "203.0.113." )
                  ip_public = "false"
                  ip_type = "reserved_documentation_test_net_3"
                  ip_rfc = "RFC_5737"

                # IETF Protocol Assignments RFC_6890-2.1
                elsif ip_address.start_with?( "192.0.0." )
                  ip_public = "false"
                  ip_type = "reserved_ietf_protocol_assignments"
                  ip_rfc = "RFC_6890-2.1"
          
                # Private/RFC-1918 -- continued -- 172.16.0.0-17.31.255.255
                elsif ip_address.start_with?( "172." )
                  # Check if 2nd octet is in range(between) 16 to 31
                  if octets[1].to_i.between?(16,31)
                    ip_public = "false"
                    ip_type = "private"
                    ip_rfc = "RFC_1918"
                  else
                    ip_public = "true"
                    ip_type = "public"
                    ip_rfc = "RFC_1366"
                  end
          
                # Carrier Grade NAT (CGN) 100.64.0.0/10 RFC_6598 100.64.0.1 - 100.127.255.255
                elsif ip_address.start_with?( "100." )
                  # Check if 2nd octet is in range(between) 64 to 127
                  if octets[1].to_i.between?(64,127)
                    ip_public = "false"
                    ip_type = "carrier_grade_nat"
                    ip_rfc = "RFC_6598"
                  else
                    ip_public = "true"
                    ip_type = "public"
                    ip_rfc = "RFC_1366"
                  end
          
                # The remaining possible NON public/routable IPs begin with 2 and are either multicast, reserved for future use, or broadcast
                elsif ip_address.start_with?( "2" )
                  # Broadcast RFC919
                  if ip_address == "255.255.255.255"
                    ip_public = "false"
                    ip_type = "broadcast"
                    ip_rfc = "RFC_919"
                  # Multicast 224.0.0.0/4 RFC1112 224.0.0.0 - 239.255.255.255
                  # Check if 1st octet is in range(between) 224 to 239
                  elsif octets[0].to_i.between?(224,239)
                    ip_public = "false"
                    ip_type = "multicast"
                    ip_rfc = "RFC_1112"
                  # Reserved Future Use 240.0.0.0/4 RFC5735 240.0.0.0 - 255.255.255.254
                  # Check if 1st octet is in range(between) 240 to 255. And 255.255.255.255 is caught above, as it is a different RFC. so do not need check for if not 255.255.255.255
                  elsif octets[0].to_i.between?(240,255)
                    ip_public = "false"
                    ip_type = "reserved_future_use"
                    ip_rfc = "RFC_5735"
                  else
                    ip_public = "true"
                    ip_type = "public"
                    ip_rfc = "RFC_1366"
                  end
          
                # RFC1366, Public/Routable
                else
                  ip_public = "true"
                  ip_type = "public"
                  ip_rfc = "RFC_1366"
                end
                # set parameters
                clean_ip_addresses.push(ip_address)
                version_ip_addresses.push("4")
                ip_addresses_is_ipv6.push("false")
                ip_addresses_public.push(ip_public)
                ip_addresses_type.push(ip_type)
                ip_addresses_rfc.push(ip_rfc)
              rescue
                not_ip_addresses.push(ip_address)
              end
          
            # IPv6
            elsif ip_address_length <= 39 && ip_address_length >= 2 && ip_address.ascii_only?
              begin
                ip_address_check = IPAddr.new(ip_address)
                # Public IP Check
                ip_public = "true"
                temp_ip_check = "zDamTyILGeKD4H0.IbPK6g"
                IPv6Privatecidr.each do |i_p|
                  cidr = IPAddr.new(i_p)
                  if cidr.include?(ip_address_check)
                    ip_public = "false"
                  end
                end
                # set parameters
                #TODO:eventually set to real type(rfc description) and real rfc (rfc code)
                if ip_address == "::1"
                  ip_type = "loopback"
                  ip_rfc = "RFC_4291"
                elsif ip_address == "::"
                  ip_type = "reserved_any_address"
                  ip_rfc = "RFC_4291"
                else
                  ip_type = "n/a"
                  ip_rfc = "n/a"
                end
                clean_ip_addresses.push(ip_address)
                version_ip_addresses.push("6")
                ip_addresses_is_ipv6.push("true")
                ip_addresses_public.push(ip_public)
                ip_addresses_type.push(ip_type)
                ip_addresses_rfc.push(ip_rfc)
              rescue
                not_ip_addresses.push(ip_address)
              end
            else
              not_ip_addresses.push(ip_address)
            end
          end
          
          ip_valid_count = clean_ip_addresses.length
          # Set the clean IP(s) and new parameters...
          if !clean_ip_addresses.empty?
            # Use to make array versus non array
            if ip_valid_count == 1
              event.set("#{parent_nested_field_name}[ip_version]", version_ip_addresses[0])
              event.set("#{parent_nested_field_name}[is_ipv6]", ip_addresses_is_ipv6[0])
              event.set("#{parent_nested_field_name}[ip_public]", ip_addresses_public[0])
              event.set("#{parent_nested_field_name}[ip_type]", ip_addresses_type[0])
              event.set("#{parent_nested_field_name}[ip_rfc]", ip_addresses_rfc[0])
              event.set("#{parent_nested_field_name}[level_1n2_ip]", ip_addresses_level_1n2_ip[0])
              event.remove("#{orig_ip_address_nested_field_name}")
              event.set("#{orig_ip_address_nested_field_name}", clean_ip_addresses[0])
          
            else
              event.set("#{parent_nested_field_name}[ip_version]", version_ip_addresses)
              event.set("#{parent_nested_field_name}[is_ipv6]", ip_addresses_is_ipv6)
              event.set("#{parent_nested_field_name}[ip_public]", ip_addresses_public)
              event.set("#{parent_nested_field_name}[ip_type]", ip_addresses_type)
              event.set("#{parent_nested_field_name}[ip_rfc]", ip_addresses_rfc)
              event.set("#{parent_nested_field_name}[level_1n2_ip]", ip_addresses_level_1n2_ip)
              event.remove("#{orig_ip_address_nested_field_name}")
              event.set("#{orig_ip_address_nested_field_name}", clean_ip_addresses)
            end
          else
            event.remove("#{orig_ip_address_nested_field_name}")
          end
          # Set non clean IP(s)
          if !not_ip_addresses.empty?
            event.tag("Invalid IP(s): [\'#{not_ip_addresses}\'] found in the field #{parent_nested_field_name}")
            #event.set("not_ip_#{parent_nested_field_name}", not_ip_addresses)
          end
          
          # Set the number of ip addresses so we can use array or non array later in pipeline and this script
          event.set("#{parent_nested_field_name}[ip_valid_count]", ip_valid_count)        
        '
        add_field =>  {
          "[@metadata][etl][pipeline]" => "filter-ruby-9718082dd0e3-2023120101"
        }
        tag_on_exception =>  "_rubyexception-9718082dd0e3-source-ip_clean_and_public.rb-2023120101"
        tag_with_exception_message => true
        id => "filter-ruby-9718082dd0e3"
      }
      # If still has valid IP(s) after cleanup
      if [source][ip] {
        # Only perform geo enrichment if is a public IP
        if [source][ip_public] == "true" {
          geoip {
            ecs_compatibility => "disabled" # If using logstash version 7.17.0 or higher or 8.0.0 or higher, uncomment this line
            source => "[source][ip]"
            target => "[source][geo]"
            default_database_type => "City"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            #:default:# cache_size => 1000
            cache_size => 90000
            add_field =>  {
              "[@metadata][source_ip_geo_location_successful]" => "true"
              "[@metadata][etl][pipeline]" => "filter-geoip-d69adabce62a-2023120101"
            }
            #fields => [
            #  "city_name",
            #  "continent_code",
            #  "country_code2",
            #  "country_code3",
            #  "country_name",
            #  "dma_code",
            #  "latitude",
            #  "location",
            #  "longitude",
            #  "postal_code",
            #  "region_name", "timezone"
            #]
            remove_field => [
              "[source][geo][ip]",
              "[source][geo][latitude]",
              "[source][geo][longitude]",
              "[source][geo][country_code2]",
              "[source][geo][country_code3]"
            ]
            tag_on_failure => [ "_geoip_lookup_failure", "parsefailure-geoip-city-source_ip", "_geoip_lookup_failure-d69adabce62a-2023120101" ]
            id => "filter-geoip-d69adabce62a"
          }
          # Make ECS compliant
          if [@metadata][source_ip_geo_location_successful] {
            mutate {
              rename => {
                "[source][geo][geo][continent_code]" => "[source][geo][continent_code]"
                "[source][geo][geo][country_iso_code]" => "[source][geo][country_iso_code]"
                "[source][geo][geo][country_name]" => "[source][geo][country_name]"
                "[source][geo][geo][location][lat]" => "[source][geo][location][lat]"
                "[source][geo][geo][location][lon]" => "[source][geo][location][lon]"
                "[source][geo][geo][timezone]" => "[source][geo][timezone]"
                "[source][geo][region_code]" => "[source][geo][region_iso_code]"
              }
              add_field => {
                "[@metadata][etl][pipeline]" => "filter-mutate-4a7e0afdd8aa-2023120101"
              }
              tag_on_failure => "_mutate_error-4a7e0afdd8aa-2023120101"
              id => "filter-mutate-4a7e0afdd8aa"
            }
          }
          geoip {
            ecs_compatibility => "disabled" # If using logstash version 7.17.0 or higher or 8.0.0 or higher, uncomment this line
            source => "[source][ip]"
            target => "[source][as]"
            default_database_type => "ASN"
            # #TONOTE:It is important to note that this config value is global to the geoip_type. That is to say all instances of the geoip filter of the same geoip_type share the same cache. The last declared cache size will win. The reason for this is that there would be no benefit to having multiple caches for different instances at different points in the pipeline, that would just increase the number of cache misses and waste memory.
            #:default:# cache_size => 1000
            cache_size => 90000
            add_field =>  {
              "[@metadata][source_ip_bgp_as_info_successful]" => "true"
              "[@metadata][etl][pipeline]" => "filter-geoip-77606e89a649-2023120101"
            }
            remove_field => [ "[source][as][ip]" ]
            tag_on_failure => [ "_geoip_lookup_failure", "parsefailure-geoip-asn-destination_ip", "_geoip_lookup_failure-77606e89a649-2023120101" ]
            id => "filter-geoip-77606e89a649"
          }
  
          # Make ECS compliant
          if [@metadata][source_ip_bgp_as_info_successful] {
            mutate {
              rename => {
                "[source][as][as][number]" => "[source][as][number]"
                "[source][as][as][organization][name]" => "[source][as][organization][name]"
                "[source][as][as_org]" => "[source][as][organization][name]"
                "[source][as][asn]" => "[source][as][number]"
                "[source][as][organization_name]" => "[source][as][organization][name]"
              }
              add_field => {
                "[@metadata][etl][pipeline]" => "filter-mutate-e1904ac5ad57-2023120101"
              }
              tag_on_failure => "_mutate_error-e1904ac5ad57-2023120101"
              id => "filter-mutate-e1904ac5ad57"
            }
          }
  
        }
      }
  
      # Copy source.ip to source.address in a sweeping fashion so don't have to one off it every time
      if ![source][address] {
        mutate {
          copy => {
            "[source][ip]" => "[source][address]"
          }
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-mutate-d04810efb967-2023120101"
          }
          tag_on_failure => "_mutate_error-d04810efb967-2023120101"
          id => "filter-mutate-d04810efb967"
        }
      }

    }
  }
}
