# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" {
    if ([file][path] or [file][name]) {

      ruby {
        code => '
          orig_destination_domain = event.get("[destination][domain]")
          orig_file_drive_letter = event.get("[file][drive_letter]")
          orig_file_extension = event.get("[file][extension]")
          orig_file_name = event.get("[file][name]")
          orig_file_path = event.get("[file][path]")

          inferred_file_name = false
          inferred_file_path = false

          orig_file_drive_letter_exists = false
          orig_file_extension_exists = false
          orig_file_name_exists = false
          orig_file_path_exists = false

          # Check if orig_file_path exists ie: is not nil/null string OR is not nil/null array OR is not empty
          if !orig_file_path.nil? && !orig_file_path.empty? && !defined?(orig_file_path).nil?
            orig_file_path_exists = true
          end
          # Check if orig_file_name path exists ie: is not nil/null string OR is not nil/null array OR is not empty
          if !orig_file_name.nil? && !orig_file_name.empty? && !defined?(orig_file_name).nil?
            orig_file_name_exists = true
          end
          # Check if orig_file_extension path exists ie: is not nil/null string OR is not nil/null array OR is not empty
          if !orig_file_extension.nil? && !orig_file_extension.empty? && !defined?(orig_file_extension).nil?
            orig_file_extension_exists = true
          end
          # Check if orig_file_drive_letter path exists ie: is not nil/null string OR is not nil/null array OR is not empty
          if !orig_file_drive_letter.nil? && !orig_file_drive_letter.empty? && !defined?(orig_file_drive_letter).nil?
            orig_file_drive_letter_exists = true
          end

          ################ Get [file][path] info ################################################################
          def get_file_path_info(orig_file)
            if orig_file.nil?
              {
                "file_drive_letter": nil,
                "file_ends_with_dollar_sign": nil,
                "file_has_multi_underscores": nil,
                "file_has_non_ascii": nil,
                "file_is_full_path": nil,
                "file_is_unc_share": nil,
                "file_length": nil,
                "file_name": nil,
                "file_system_type": nil,
                "file_total_paths": nil,
                "file_unc_share_first_path": nil,
                "file_unc_share_last_path": nil,
                "number_of_orig_file": nil
              }
            else
              # Determine if the field is an array if not make it an array for continuity
              if orig_file.is_a? Enumerable
                orig_file = orig_file.uniq
                number_of_orig_file = orig_file.length
              else
                orig_file = [ orig_file ]
                number_of_orig_file = 1
              end
              file_drive_letter = Array.new
              file_ends_with_dollar_sign = Array.new
              file_has_multi_underscores = Array.new
              file_has_non_ascii = Array.new
              file_is_full_path = Array.new
              file_is_unc_share = Array.new
              file_length = Array.new
              file_name = Array.new
              file_system_type = Array.new
              file_total_paths = Array.new
              file_unc_share_first_path = Array.new
              file_unc_share_last_path = Array.new
            end

            #for f_original in orig_file
            Array(orig_file).each do |f_original|
              next if f_original.nil?

              f_drive_letter = nil
              f_ends_with_dollar_sign = /\$$/ === f_original
              f_has_non_ascii = false === f_original.ascii_only?
              f_is_full_path = false
              f_is_unc_share = false
              f_length = f_original.length
              f_system_type = "unknown"
              f_universally_formatted = f_original
              f_has_multi_underscores = f_original.include?("___")

              # windows(NT) file system type UNC (share) path
              if f_original.start_with?( "\\" )
                f_is_full_path = true
                f_system_type = "windows"
                f_is_unc_share = f_original.start_with?( "\\\\" )
                f_universally_formatted = f_original.gsub(/\\+/,"/")
              # unix file system type path
              elsif f_original.start_with?( "/" )
                f_system_type = "unix"
                f_is_full_path = true
              # windows(NT) file system type with drive letter
              elsif /^[a-zA-Z]:\\/ =~ f_original
                f_drive_letter = f_original.match /^(?<f_drive_letter>[a-zA-Z]):\\/
                f_system_type = "windows"
                f_is_full_path = true
                f_universally_formatted = f_original.gsub(/\\+/,"/").gsub(/^[a-zA-Z]:/,"")
                if f_drive_letter
                    f_drive_letter = f_drive_letter[:f_drive_letter].downcase
                end
              end

              f_name = File.basename(f_universally_formatted)
              f_split = f_universally_formatted.split("/")[1..-1]
              # Get total paths
              f_total_paths = f_split&.length || 0
              # If after being cleaned or originally is only "/" then we will get 0 so need to say if 0 set to 1
              f_total_paths = 1 if f_total_paths.zero?

              # Get root of share
              if f_is_unc_share
                f_unc_share_first_path = f_split&.first
                file_unc_share_first_path.push(f_unc_share_first_path) if f_unc_share_first_path
                # Get base of share
                if f_total_paths > 1
                  f_unc_share_last_path = f_split&.last
                  file_unc_share_last_path.push(f_unc_share_last_path) if f_unc_share_last_path
                end
              end

              file_drive_letter.push(f_drive_letter)
              file_ends_with_dollar_sign.push(f_ends_with_dollar_sign)
              file_has_multi_underscores.push(f_has_multi_underscores)
              file_has_non_ascii.push(f_has_non_ascii)
              file_name.push(f_name)
              file_is_full_path.push(f_is_full_path)
              file_is_unc_share.push(f_is_unc_share)
              file_length.push(f_length)
              file_system_type.push(f_system_type)
              file_total_paths.push(f_total_paths)

            end

            # Set variables to be used in the event whether array or not
            if number_of_orig_file == 1
              file_drive_letter = file_drive_letter[0]
              file_ends_with_dollar_sign = file_ends_with_dollar_sign[0]
              file_has_multi_underscores = file_has_multi_underscores[0]
              file_has_non_ascii = file_has_non_ascii[0]
              file_is_full_path = file_is_full_path[0]
              file_is_unc_share = file_is_unc_share[0]
              file_length = file_length[0]
              file_name = file_name[0]
              file_system_type = file_system_type[0]
              file_total_paths = file_total_paths[0]
              file_unc_share_first_path = file_unc_share_first_path[0]
              file_unc_share_last_path = file_unc_share_last_path[0]
            else
              file_drive_letter = file_drive_letter.uniq
              file_ends_with_dollar_sign = file_ends_with_dollar_sign.include?(true)
              file_has_multi_underscores = file_has_multi_underscores.include?(true)
              file_has_non_ascii = file_has_non_ascii.include?(true)
              file_is_full_path = file_is_full_path.include?(true)
              file_is_unc_share = file_is_unc_share.include?(true)
              file_length = file_length.uniq
              file_name = file_name.uniq
              file_system_type = file_system_type.uniq
              file_total_paths = file_total_paths.uniq
              file_unc_share_first_path = file_unc_share_first_path.uniq
              file_unc_share_last_path = file_unc_share_last_path.uniq
            end

            # Variables to be returned
            {
              "file_drive_letter": file_drive_letter,
              "file_ends_with_dollar_sign": file_ends_with_dollar_sign,
              "file_has_multi_underscores": file_has_multi_underscores,
              "file_has_non_ascii": file_has_non_ascii,
              "file_is_full_path": file_is_full_path,
              "file_is_unc_share": file_is_unc_share,
              "file_length": file_length,
              "file_name": file_name,
              "file_system_type": file_system_type,
              "file_total_paths": file_total_paths,
              "file_unc_share_first_path": file_unc_share_first_path,
              "file_unc_share_last_path": file_unc_share_last_path,
              "number_of_orig_file": orig_file
            }
          end
          #######################################################################################################################

          ################ Get [file][name] info ################################################################
          def get_file_name_info(orig_file)
            # Determine if the field is an array if not make it an array for continuity
            if orig_file.is_a? Enumerable
              orig_file = orig_file.uniq
              number_of_orig_file = orig_file.length
            else
              orig_file = [ orig_file ]
              number_of_orig_file = 1
            end
            file_ends_with_dollar_sign = Array.new
            file_extension = Array.new
            file_extension_length = Array.new
            file_has_multi_underscores = Array.new
            file_has_non_ascii = Array.new
            file_is_full_path = Array.new
            file_length = Array.new
            file_system_type = Array.new

            #for f_original in orig_file
            orig_file.each do |f_original|
              next if f_original.nil?

              f_drive_letter = nil
              f_ends_with_dollar_sign = /\$$/ === f_original
              f_has_non_ascii = false === f_original.ascii_only?
              f_is_full_path = false
              f_is_unc_share = false
              f_length = f_original.length
              f_system_type = "unknown"
              f_universally_formatted = f_original
              f_has_multi_underscores = f_original.include?("___")


              # windows(NT) file system type UNC (share) path
              if f_original.start_with?( "\\" )
                f_is_full_path = true
                f_system_type = "windows"
                f_is_unc_share = f_original.start_with?( "\\\\" )
                f_universally_formatted = f_original.gsub(/\\+/,"/")
              # unix file system type path
              elsif f_original.start_with?( "/" )
                f_system_type = "unix"
                f_is_full_path = true
              # windows(NT) file system type with drive letter
              elsif /^[a-zA-Z]:\\/ =~ f_original
                f_drive_letter = f_original.match /^(?<f_drive_letter>[a-zA-Z]):\\/
                f_system_type = "windows"
                f_is_full_path = true
                if f_drive_letter
                    f_drive_letter = f_drive_letter[:f_drive_letter].downcase
                end
              end

              f_extension = File.extname(f_universally_formatted)[1..-1]

              file_is_full_path.push(f_is_full_path)
              file_system_type.push(f_system_type)
              file_ends_with_dollar_sign.push(f_ends_with_dollar_sign)
              if !f_extension.nil? && !f_extension.empty?
                file_extension.push(f_extension)
                file_extension_length.push(f_extension.length)
              end
              file_has_multi_underscores.push(f_has_multi_underscores)
              file_has_non_ascii.push(f_has_non_ascii)
              file_length.push(f_length)
            end

            # Set variables to be used in the event whether array or not
            if number_of_orig_file == 1
              file_ends_with_dollar_sign = file_ends_with_dollar_sign[0]
              file_extension = file_extension[0]
              file_extension_length = file_extension_length[0]
              file_is_full_path = file_is_full_path[0]
              file_has_multi_underscores = file_has_multi_underscores[0]
              file_has_non_ascii = file_has_non_ascii[0]
              file_system_type = file_system_type[0]
              file_length = file_length[0]
            else
              file_ends_with_dollar_sign = file_ends_with_dollar_sign.include?(true)
              file_extension = file_extension.uniq
              file_extension_length = file_extension_length.uniq
              file_is_full_path = file_is_full_path.include?(true)
              file_has_multi_underscores = file_has_multi_underscores.include?(true)
              file_has_non_ascii = file_has_non_ascii.include?(true)
              file_system_type = file_system_type.uniq
              file_length = file_length.uniq
            end
            # Variables to be returned
            {
              "file_ends_with_dollar_sign": file_ends_with_dollar_sign,
              "file_extension": file_extension,
              "file_extension_length": file_extension_length,
              "file_is_full_path": file_is_full_path,
              "file_has_multi_underscores": file_has_multi_underscores,
              "file_has_non_ascii": file_has_non_ascii,
              "file_system_type": file_system_type,
              "file_length": file_length,
              "number_of_orig_file": number_of_orig_file
            }
          end
          #######################################################################################################################



          ################ Set variables

          # File path exists & not file name. Then infer file name from path.
          if orig_file_path_exists && !orig_file_name_exists
            file_path_info = get_file_path_info(orig_file_path)
            if file_path_info && !file_path_info[:file_name].to_s.empty?
              file_name_info = get_file_name_info(file_path_info[:file_name])
                orig_file_name_exists = true
                inferred_file_name = true
            end

          # File name exists & not file path. Then infer file path from file name.
          elsif orig_file_name_exists && !orig_file_path_exists
            file_name_info = get_file_name_info(orig_file_name)
            if file_name_info[:file_is_full_path]
              file_path_info = get_file_path_info(orig_file_name)
              orig_file_path_exists = true
              inferred_file_path = true
            end

          # File path exists & file name exists
          elsif orig_file_path_exists && orig_file_name_exists
            file_path_info = get_file_path_info(orig_file_path)
            file_name_info = get_file_name_info(orig_file_name)
          end

          ################ Set info ################################################################
          if orig_file_path_exists
            if !orig_file_drive_letter_exists
              event.set("[file][drive_letter]", file_path_info[:file_drive_letter])
            end
            event.set("[file][path_ends_with_dollar_sign]", file_path_info[:file_ends_with_dollar_sign])
            event.set("[file][path_has_multi_underscores]", file_path_info[:file_has_multi_underscores])
            event.set("[file][path_has_non_ascii]", file_path_info[:file_has_non_ascii])
            event.set("[file][path_is_full_path]", file_path_info[:file_is_full_path])
            event.set("[file][path_is_unc_share]", file_path_info[:file_is_unc_share])
            event.set("[file][path_length]", file_path_info[:file_length])
            event.set("[file][path_system_type]", file_path_info[:file_system_type])
            event.set("[file][path_total_paths]", file_path_info[:file_total_paths])
            event.set("[file][unc_share_first_path]", file_path_info[:file_unc_share_first_path])
            event.set("[file][unc_share_last_path]", file_path_info[:file_unc_share_last_path])
            # Copy root share to destination domain so can do enrichment
            if !file_path_info[:file_unc_share_first_path].nil? && !file_path_info[:file_unc_share_first_path].empty? && !(!defined?(orig_destination_domain).nil? && !orig_destination_domain.nil? && !(orig_destination_domain.respond_to?(:empty?) && !!orig_destination_domain.empty?))
              event.set("[destination][domain]", file_path_info[:file_unc_share_first_path])
            end
            if inferred_file_path
              event.set("[file][path]", orig_file_name)
            end

          end
          if orig_file_name_exists
            event.set("[file][name_ends_with_dollar_sign]", file_name_info[:file_ends_with_dollar_sign])
            if !orig_file_extension_exists
            #  event.set("[file][extension]", file_name_info[:file_extension])
            end
            event.set("[file][extension_length]", file_name_info[:file_extension_length])
            event.set("[file][name_has_multi_underscores]", file_name_info[:file_has_multi_underscores])
            event.set("[file][name_has_non_ascii]", file_name_info[:file_has_non_ascii])
            event.set("[file][name_length]", file_name_info[:file_length])
            if inferred_file_name
              event.set("[file][name]", file_path_info[:file_name])
            end
          end
          #######################################################################################################################
        '
        add_field =>  {
          "[@metadata][etl][pipeline]" => "filter-ruby-3f0c99d021fe-2023120101"
        }
        tag_on_exception =>  "_rubyexception-3f0c99d021fe-2023120101"
        tag_with_exception_message => true
        id => "filter-ruby-3f0c99d021fe"
      }

    }
  }
}
