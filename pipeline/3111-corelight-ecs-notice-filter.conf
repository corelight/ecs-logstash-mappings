# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ([labels][corelight][event_sub_type] == "notice"  or [labels][corelight][event_sub_type] == "notice_alarm" ) {
    
    mutate {
      update => {
        "[event][kind]" => "alert"
        "[event][category]" => [ "intrusion_detection", "network" ]
        "[event][type]" => "info"
        "[labels][corelight][event_category]" => "detection"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CL_DS_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CL_DS_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "VAR_CL_DS_SUFFIX_PROTOCOL_LOG_VARIOUS"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CL_DS_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "actions" => "[notice][actions]"
        "dropped" => "[notice][dropped]"
        "dst" => "[notice][dst_ip]"
        "email_body_sections" => "[notice][email_body_sections]"
        "email_delay_tokens" => "[notice][email_delay_tokens]"
        "file_desc" => "[file][description]"
        "file_mime_type" => "[file][mime_type]"
        "identifier" => "[notice][identifier]"
        "msg" => "[notice][message]"
        "n" => "[notice][number]"
        "note" => "[notice][note]"
        "p" => "[notice][p]"
        "peer_descr" => "[notice][peer_description]"
        "peer_name" => "[notice][peer_name]"
        "severity" => "[event][severity]"
        "src" => "[notice][src_ip]"
        "sub" => "[notice][sub_message]"
        "suppress_for" => "[notice][suppress_duration]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-f7dc9b2b9b37-main-notice-2022032801.01"
      }
      copy => {
        "[notice][dst_ip]" => "[destination][ip]"
        "[notice][p]" => "[destination][port]"
        "[notice][src_ip]" => "[source][ip]"
      }
      tag_on_failure => "_mutate_error-f7dc9b2b9b37"
      id => "filter-mutate-f7dc9b2b9b37"
    }
    if [notice][note] == "Scan::Random_Scan" {
        ruby {
          code => "
            notice = event.get('[notice][message]')
            notice_array = notice.split(' ')
            hosts = notice_array[4]
            ports = notice_array[7]
            time = notice_array[10]
            min_temp = time.split('m')
            min = min_temp[0].to_i
            sec = (min * 60) + min_temp[2].to_i 
            event.set('[notice][scan][hosts]', hosts)
            event.set('[notice][scan][ports]', ports)
            event.set('[notice][scan][time_sec]', sec)
          "
          add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-21f2fac0cad8-2024092701"
        }
        tag_on_exception => "_rubyexception-d10b3b1ae673-random_scan-2024092701"
        tag_with_exception_message => true
        id => "filter-ruby-21f2fac0cad8"
        }
  }
 if [notice][note] == "Scan::Address_Scan" {
        ruby {
          code => "
            notice = event.get('[notice][message]')
            notice_array = notice.split(' ')
            hosts = notice_array[4]
            ports = notice.scan(/\d+\//)
            portsTemp = ports.to_s
            ports = portsTemp.scan(/\d+/)
            time = notice.scan(/\d+m\d+s/)
            timeTemp = time.to_s
            minTemp = timeTemp.scan(/\d+m/)
            min = minTemp[0].to_i
            secTemp = timeTemp.scan(/\d+s/)
            sec = secTemp[0].to_i   
            time = (min * 60) + sec
            event.set('[notice][scan][hosts]', hosts)
            event.set('[notice][scan][ports]', ports)
            event.set('[notice][scan][time_sec]', time)
            "
          add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-7977ae499e0d-2024092701"
        }
        tag_on_exception => "_rubyexception-7977ae499e0d-address_scan-2024092701"
        tag_with_exception_message => true
        id => "filter-ruby-7977ae499e0d"

        }
  }
  if [notice][note] == "Scan::Port_Scan" {
        ruby {
        code => "
          notice = event.get('[notice][message]')
          notice_array = notice.split(' ')
          destHost = notice_array[9]
          ports = notice_array[4]
          time = notice_array[11]
          min_temp = time.split('m')
          min = min_temp[0].to_i  
          sec = (min * 60) + min_temp[2].to_i
          event.set('[notice][scan][destination]', destHost)
          event.set('[notice][scan][ports]', ports)
          event.set('[notice][scan][time_sec]', sec)
        "
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-0075c9d9f539-2024092701"
        }
        tag_on_exception => "_rubyexception-0075c9d9f539-port_scan-2024092701"
        tag_with_exception_message => true
        id => "filter-ruby-0075c9d9f539"
        }
  }
  }
}