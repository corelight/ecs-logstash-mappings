# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and [labels][corelight][event_sub_type] == "suricata_corelight" {

    mutate {
      update => {
        "[event][kind]" => "alert"
        "[event][category]" => [ "intrusion_detection", "network" ]
        "[event][type]" => "info"
        "[labels][corelight][event_category]" => "detection"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CL_DS_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CL_DS_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "VAR_CL_DS_SUFFIX_PROTOCOL_LOG_SURICATA_CORELIGHT"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CL_DS_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "alert.action" => "[suricata][alert][action]"
        "alert.category" => "[rule][category]"
        "alert.gid" => "[rule][gid]"
        "alert.metadata" => "[suricata][alert][metadata_original]"
        "alert.rev" => "[rule][version]"
        "alert.signature" => "[rule][name]"
        "alert.signature_id" => "[rule][signature_id]"
        "alert.severity" => "[event][severity]"
        "metadata" => "[suricata][metadata]"
        "pcap_cnt" => "[suricata][pcap_count]"
        "retries" => "[suricata][retries]"
        "service" => "[network][protocol]"
        "[orig_vulnerable_host][cve]" => "[source][vulnerable_host][cve]"
        "[orig_vulnerable_host][uid]" => "[source][vulnerable_host][uid]"
        "[orig_vulnerable_host][cid]" => "[source][vulnerable_host][cid]"
        "[orig_vulnerable_host][hostname]" => "[source][vulnerable_host][hostname]"
        "[orig_vulnerable_host][os_version]" => "[source][vulnerable_host][os_version]"
        "[orig_vulnerable_host][source]" => "[source][vulnerable_host][source]"
        "[orig_vulnerable_host][criticality]" => "[source][vulnerable_host][criticality]"
        "[resp_vulnerable_host][cve]" => "[destination][vulnerable_host][cve]"
        "[resp_vulnerable_host][uid]" => "[destination0][vulnerable_host][uid]"
        "[resp_vulnerable_host][cid]" => "[destination][vulnerable_host][cid]"
        "[resp_vulnerable_host][hostname]" => "[destination][vulnerable_host][hostname]"
        "[resp_vulnerable_host][os_version]" => "[destination][vulnerable_host][os_version]"
        "[resp_vulnerable_host][source]" => "[destination][vulnerable_host][source]"
        "[resp_vulnerable_host][criticality]" => "[destination][vulnerable_host][criticality]"
      }
      # convert so can do actually if conditional checks on true/false value itself (versus bool field exists that it bugs to) without unnecessary logstash logic
      convert => {
        "[log][id][tx_id]" => "string"
      }
      copy => {
        "[suricata][alert][action]" => "[event][type]"
        "[suricata][alert][metadata_original]" => "[suricata][alert][metadata]"
      }
      split => {
        "[event][category]" => ","
      }
      add_field => {
        "[event][kind]" => "alert"
        "[@metadata][etl][pipeline]" => "filter-mutate-5bb0f2dea084-2023120101"
      }
      tag_on_failure => "_mutate_error-5bb0f2dea084-2023120101"
      id => "filter-mutate-5bb0f2dea084"
    }
    if [suricata][alert][metadata] {
      kv {
        source => "[suricata][alert][metadata]"
        field_split => ","
        value_split => ":"
        target => "[suricata][alert][metadata]"
        transform_key => "lowercase"
        # default is 30 seconds, not good for anything
        timeout_millis => 1000
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-kv-5d5727c6a4a5-2023120101"
        }
        tag_on_failure => "_kv_filter_error-5d5727c6a4a5-2023120101"
        tag_on_timeout => "_kv_filter_timeout-5d5727c6a4a5-2023120101"
        id => "filter-mutate-5d5727c6a4a5"
      }
      mutate {
        rename => {
          "[suricata][alert][metadata][created_at]" => "[suricata][alert][metadata][created_at_non_formatted_date]"
          "[suricata][alert][metadata][filename]" => "[file][name]"
          "[suricata][alert][metadata][mitre_tactic_id]" => "[threat][tactic][id]"
          "[suricata][alert][metadata][mitre_tactic_name]" => "[threat][tactic][name]"
          "[suricata][alert][metadata][mitre_technique_id]" => "[threat][technique][id]"
          "[suricata][alert][metadata][mitre_technique_name]" => "[threat][technique][name]"
          "[suricata][alert][metadata][updated_at]" => "[suricata][alert][metadata][updated_at_non_formatted_date]"
        }
        add_field => {
          "[threat][tactic][reference]" => "https://attack.mitre.org/tactics/%{[threat][tactic][id]}"
          "[threat][technique][reference]" => "https://attack.mitre.org/techniques/%{[threat][technique][id]}"
          "[@metadata][etl][pipeline]" => "filter-mutate-a9deae5bf5f6-2023120101"
        }
        tag_on_failure => "_mutate_error-a9deae5bf5f6-2023120101"
        id => "filter-mutate-a9deae5bf5f6"
      }
      if ![threat][framework] and ([threat][tactic][id] or [threat][technique][id]) {
        mutate {
          add_field => {
            "[threat][framework]" => "MITRE ATT&CK"
            "[@metadata][etl][pipeline]" => "filter-mutate-8a202f655856-2023120101"
          }
          tag_on_failure => "_mutate_error-8a202f655856-2023120101"
          id => "filter-mutate-8a202f655856"
        }
      }
      if [suricata][alert][metadata][created_at_non_formatted_date] {
        date {
          match => [ "[suricata][alert][metadata][created_at_non_formatted_date]", "yyyy-MM-dd", "yyyy_MM_dd" ]
          target => "[suricata][alert][metadata][created_at]"
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-date-7a8b43b2354c-2023120101"
          }
          tag_on_failure => [ "_dateparsefailure", "_dateparsefailure-7a8b43b2354c-2023120101", "_parsefailure" ]
          id => "filter-date-7a8b43b2354c"
        }
      }
      if [suricata][alert][metadata][updated_at_non_formatted_date] {
        date {
          match => [ "[suricata][alert][metadata][updated_at_non_formatted_date]", "yyyy-MM-dd", "yyyy_MM_dd" ]
          target => "[suricata][alert][metadata][updated_at]"
          add_field => {
            "[@metadata][etl][pipeline]" => "filter-date-d9dbad58662d-2023120101"
          }
          tag_on_failure => [ "_dateparsefailure", "_dateparsefailure-d9dbad58662d-2023120101", "_parsefailure" ]
          id => "filter-date-d9dbad58662d"
        }
      }
    }
    # Do not keep tx_id / [log][id][tx_id] if it is 0
    if [log][id][tx_id] and [log][id][tx_id] == "0" {
      mutate {
        remove_field => [
          "[log][id][tx_id]"
        ] 
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-mutate-b6dcf3534716-2023120101"
        }
        tag_on_failure => "_mutate_error-b6dcf3534716-2023120101"
        id => "filter-mutate-b6dcf3534716"
      }
    }
    # Append [suricata][alert][action] to [event][type]
    if [suricata][alert][action] {
      mutate {
        merge => { "[event][type]" => "[suricata][alert][action]" }
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-mutate-add0818b7ef1-2023120101"
        }
        tag_on_failure => "_mutate_error-add0818b7ef1-2023120101"
        id => "filter-mutate-add0818b7ef1"
      }
    }

  }
}
