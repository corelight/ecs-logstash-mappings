# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ( [labels][corelight][event_sub_type] == "x509" or [labels][corelight][event_sub_type] == "x509_red" ) {
    
    mutate {
      update => {
        "[event][category]" => "file"
        "[event][kind]" => "event"
        "[event][type]" => "info"
        "[labels][corelight][event_category]" => "files"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CL_DS_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CL_DS_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "VAR_CL_DS_SUFFIX_PROTOCOL_LOG_X509"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CL_DS_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "basic_constraints.ca" => "[file][x509][certificate][basic_constraints_ca]"
        "basic_constraints.path_length" => "[file][x509][certificate][basic_constraints_path_length]"
        "basic_constraints_ca" => "[file][x509][certificate][basic_constraints_ca]"
        "basic_constraints_path_length" => "[file][x509][certificate][basic_constraints_path_length]"
        "certificate.cn" => "[file][x509][certificate][common_name]"
        "certificate.curve" => "[file][x509][public_key_curve]"
        "certificate.exponent" => "[file][x509][certificate][exponent]"
        "certificate.issuer" => "[file][x509][issuer][distinguished_name]"
        "certificate.key_alg" => "[file][x509][public_key_algorithm]"
        "certificate.key_length" => "[file][x509][public_key_size]"
        "certificate.key_type" => "[file][x509][public_key_type]"
        "certificate.logcert" => "[file][x509][logcert]"
        "certificate.not_valid_after" => "[file][x509][not_after_non_formatted_date]"
        "certificate.not_valid_before" => "[file][x509][not_before_non_formatted_date]"
        "certificate.serial" => "[file][x509][serial_number]"
        "certificate.serial_number" => "[file][x509][serial_number]"
        "certificate.sig_alg" => "[file][x509][signature_algorithm]"
        "certificate.subject" => "[file][x509][subject][distinguished_name]"
        "certificate.version" => "[file][x509][subject][version_number]"
        "certificate_cn" => "[file][x509][certificate][common_name]"
        "certificate_curve" => "[file][x509][public_key_curve]"
        "certificate_exponent" => "[file][x509][certificate][exponent]"
        "certificate_issuer" => "[file][x509][issuer][distinguished_name]"
        "certificate_key_alg" => "[file][x509][public_key_algorithm]"
        "certificate_key_length" => "[file][x509][public_key_size]"
        "certificate_key_type" => "[file][x509][public_key_type]"
        "certificate_logcert" => "[file][x509][logcert]"
        "certificate_not_valid_after" => "[file][x509][not_after_non_formatted_date]"
        "certificate_not_valid_before" => "[file][x509][not_before_non_formatted_date]"
        "certificate_serial" => "[file][x509][serial_number]"
        "certificate_serial_number" => "[file][x509][serial_number]"
        "certificate_sig_alg" => "[file][x509][signature_algorithm]"
        "certificate_subject" => "[file][x509][subject][distinguished_name]"
        "certificate_version" => "[file][x509][subject][version_number]"
        "client_cert" => "[file][x509][client_cert]"
        "fingerprint" => "[file][hash][sha256]"
        "file_id" => "[log][id][file_id]"
        "host_cert" => "[file][x509][host_cert]"
        "san.dns" => "[file][x509][san_dns]"
        "san.email" => "[file][x509][san_email]"
        "san.ip" => "[file][x509][san_ip]"
        "san.uri" => "[file][x509][san_uri]"
        "san_dns" => "[file][x509][san_dns]"
        "san_email" => "[file][x509][san_email]"
        "san_ip" => "[file][x509][san_ip]"
        "san_uri" => "[file][x509][san_uri]"
        "[certificate][cn]" => "[file][x509][certificate][common_name]"
        "[certificate][curve]" => "[file][x509][public_key_curve]"
        "[certificate][exponent]" => "[file][x509][certificate][exponent]"
        "[certificate][issuer]" => "[file][x509][issuer][distinguished_name]"
        "[certificate][key_alg]" => "[file][x509][public_key_algorithm]"
        "[certificate][key_length]" => "[file][x509][public_key_size]"
        "[certificate][key_type]" => "[file][x509][public_key_type]"
        "[certificate][logcert]" => "[file][x509][logcert]"
        "[certificate][not_valid_after]" => "[file][x509][not_after_non_formatted_date]"
        "[certificate][not_valid_before]" => "[file][x509][not_before_non_formatted_date]"
        "[certificate][serial]" => "[file][x509][serial_number]"
        "[certificate][serial_number]" => "[file][x509][serial_number]"
        "[certificate][sig_alg]" => "[file][x509][signature_algorithm]"
        "[certificate][subject]" => "[file][x509][subject][distinguished_name]"
        "[certificate][version]" => "[file][x509][subject][version_number]"
        "[san][dns]" => "[file][x509][san_dns]"
        "[san][email]" => "[file][x509][san_email]"
        "[san][ip]" => "[file][x509][san_ip]"
        "[san][uri]" => "[file][x509][san_uri]"
        "[basic_constraints][ca]" => "[file][x509][certificate][basic_constraints_ca]"
        "[basic_constraints][path_length]" => "[file][x509][certificate][basic_constraints_path_length]"
      }
      copy => {
        "[file][x509][san_uri]" => "[url][original]"
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-b76a7d5a369a-2024011001"
      }
      tag_on_failure => "_mutate_error-b76a7d5a369a"
      id => "filter-mutate-b76a7d5a369a"
    }

    # Check if certificate is empty object/dictionary
    if [certificate] {
      ruby {
        code => '
          if event.get("certificate").is_a?(Hash) && event.get("certificate").empty?
            event.remove("certificate")
          end
        '
        tag_on_exception => "_rubyexception-9632c69ab30e"
        tag_with_exception_message => true
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-9632c69ab30e-2024011001"
        }
        id => "filter-ruby-9632c69ab30e"
      }
    }

    # Check if basic_constraints is empty object/dictionary
    if [basic_constraints] {
      ruby {
        code => '
          if event.get("basic_constraints").is_a?(Hash) && event.get("basic_constraints").empty?
            event.remove("basic_constraints")
          end
        '
        tag_on_exception => "_rubyexception-28475c459f05"
        tag_with_exception_message => true
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-28475c459f05-2024011001"
        }
        id => "filter-ruby-28475c459f05"
      }
    }

    # Check if san is empty object/dictionary
    if [san] {
      ruby {
        code => '
          if event.get("san").is_a?(Hash) && event.get("san").empty?
            event.remove("san")
          end
        '
        tag_on_exception => "_rubyexception-746019ad9438"
        tag_with_exception_message => true
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-746019ad9438-2024011001"
        }
        id => "filter-ruby-746019ad9438"
      }
    }
    
    if [log][id][id] {
      mutate {
        replace => {
          "[event][id]" => "%{[log][id][id]}"
        }
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-mutate-58bd9eb4e5e6-2023120101"
        }
        tag_on_failure => "_mutate_error-58bd9eb4e5e6"
        id => "filter-mutate-58bd9eb4e5e6"
      }
    }
    # Older versions of x509 is originally the field file_id
    else if [log][id][file_id] {
      mutate {
        replace => {
          "[event][id]" => "%{[log][id][file_id]}"
        }
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-mutate-04c613a071d3-2024011001"
        }
        tag_on_failure => "_mutate_error-04c613a071d3"
        id => "filter-mutate-04c613a071d3"
      }
    }
    
    # certificate_not_valid_after/certificate.not_valid_after
    # [file][x509][not_after]/[file][x509][not_after_non_formatted_date]
    if [file][x509][not_after_non_formatted_date] {
      date {
        match => [ "[file][x509][not_after_non_formatted_date]", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", "UNIX", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ]
        target => "[file][x509][not_after]"
        add_field => {
          "[@metadata][z_no_reuse][file_x509_not_after_string]" => "%{[file][x509][not_after]}"
          "[@metadata][etl][pipeline]" => "filter-date-0208b4090f45-2023120101"
        }
        tag_on_failure => [ "_dateparsefailure", "_dateparsefailure-0208b4090f45-2023120101", "_parsefailure" ]
        id => "filter-date-0208b4090f45"
      }
    }

    # certificate_not_valid_before/certificate.not_valid_before
    # [file][x509][not_before]/[file][x509][not_before_non_formatted_date]
    if [file][x509][not_before_non_formatted_date] {
      date {
        match => [ "[file][x509][not_before_non_formatted_date]", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZ", "UNIX", "YYYY-MM-dd HH:mm:ss.SSS", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ]
        target => "[file][x509][not_before]"
        add_field => {
          "[@metadata][z_no_reuse][file_x509_not_before_string]" => "%{[file][x509][not_before]}"
          "[@metadata][etl][pipeline]" => "filter-date-d64fd222547a-2023120101"
        }
        tag_on_failure => [ "_dateparsefailure", "_dateparsefailure-d64fd222547a-2023120101", "_parsefailure" ]
        id => "filter-date-d64fd222547a"
      }
    }
    # Check if the converted date is going to cause a mapping of date issue despite "technically" being a valid date. ie: the year 40000
    if [@metadata][z_no_reuse][file_x509_not_after_string] !~ /^\d{4}-/ {
      mutate {
        remove_field => [ "[file][x509][not_after]" ]
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-date-1402899aea99-2023120101"
        }
        tag_on_failure => "_mutate_error-1402899aea99"
        id => "filter-mutate-1402899aea99"
      }
    }
    if [@metadata][z_no_reuse][file_x509_not_before_string] !~ /^\d{4}\-/ {
      mutate {
        remove_field =>[ "[file][x509][not_before]" ]
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-date-f5a11ac3ea1e-2023120101"
        }
        tag_on_failure => "_mutate_error-f5a11ac3ea1e"
        id => "filter-mutate-f5a11ac3ea1e"
      }
    }

  }
}
