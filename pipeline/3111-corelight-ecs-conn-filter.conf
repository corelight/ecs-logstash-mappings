# Corelight ECS Logstash Pipeline
# Git Repository: https://github.com/corelight/ecs-logstash-mappings
# Authors: Corelight Inc, Brasi Tech LLC
# License: BSD 3-Clause
# Support: https://github.com/corelight/ecs-logstash-mappings/issues/new
# Releases: https://github.com/corelight/ecs-logstash-mappings/releases

filter {
  if [@metadata][z_no_reuse][event_type] == "corelight" and ( [labels][corelight][event_sub_type] == "conn" or [labels][corelight][event_sub_type] == "conn_red" or [labels][corelight][event_sub_type] == "conn_long" ) {

    mutate {
      update => {
        "[event][kind]" => "event"
        "[event][category]" => "network"
        "[event][type]" => [ "connection", "info", "protocol" ]
        "[labels][corelight][event_category]" => "network_protocols"
        "[@metadata][temporary_metadata_index_name_type]" => "VAR_CL_DS_TYPE_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_prefix]" => "VAR_CL_DS_PREFIX_PROTOCOL_LOG"
        "[@metadata][temporary_metadata_index_name_dataset_suffix]" => "VAR_CL_DS_SUFFIX_PROTOCOL_LOG_CONN"
        "[@metadata][temporary_metadata_index_name_namespace]" => "VAR_CL_DS_NAMESPACE_PROTOCOL_LOG"
      }
      rename => {
        "app" => "[network][application]"
        "cache_add_rx_ev" => "[conn][cache_add_rx_ev]"
        "cache_add_rx_mpg" => "[conn][cache_add_rx_mpg]"
        "cache_add_rx_new" => "[conn][cache_add_rx_new]"
        "cache_add_tx_ev" => "[conn][cache_add_tx_ev]"
        "cache_add_tx_mpg" => "[conn][cache_add_tx_mpg]"
        "cache_del_mpg" => "[conn][cache_del_mpg]"
        "cache_entries" => "[conn][cache_entries]"
        "conn_state" => "[network][connection][state]"
        "corelight_shunted" => "[conn][corelight_shunted]"
        "duration" => "[event][duration]"
        "history" => "[network][connection][history]"
        "id.orig_h_name.src" => "[conn][id][orig_h_name][src]"
        "id.orig_h_name.vals" => "[conn][id][orig_h_name][vals]"
        "id.resp_h_name.src" => "[conn][id][resp_h_name][src]"
        "id.resp_h_name.vals" => "[conn][id][resp_h_name][vals]"
        "id_orig_h_name_src" => "[conn][id][orig_h_name][src]"
        "id_orig_h_name_vals" => "[conn][id][orig_h_name][vals]"
        "id_resp_h_name_src" => "[conn][id][resp_h_name][src]"
        "id_resp_h_name_vals" => "[conn][id][resp_h_name][vals]"
        "missed_bytes" => "[network][missed_bytes]"
        "orig_bytes" => "[source][bytes]"
        "orig_cc" => "[source][geo][country_iso_code]"
        "orig_ip_bytes" => "[source][ip_bytes]"
        "orig_l2_addr" => "[source][mac]"
        "orig_pkts" => "[source][packets]"
        "orig_shunted_bytes" => "[conn][orig_shunted_bytes]"
        "orig_shunted_pkts" => "[conn][orig_shunted_pkts]"
        "resp_bytes" => "[destination][bytes]"
        "resp_cc" => "[destination][geo][country_iso_code]"
        "resp_ip_bytes" => "[destination][ip_bytes]"
        "resp_l2_addr" => "[destination][mac]"
        "resp_orig" => "[conn][resp_orig]"
        "resp_pkts" => "[destination][packets]"
        "resp_shunted_bytes" => "[conn][resp_shunted_bytes]"
        "resp_shunted_pkts" => "[conn][resp_shunted_pkts]"      
        "service" => "[network][protocol]"
        "spcap.rule" => "[conn][spcap_rule]"
        "spcap.trigger" => "[conn][spcap_trigger]"
        "spcap.url" => "[conn][spcap_url]"
        "spcap_rule" => "[conn][spcap_rule]"
        "spcap_trigger" => "[conn][spcap_trigger]"
        "spcap_url" => "[conn][spcap_url]"
        "tunnel_parents" => "[log][id][tunnel_parents]"
        "orig_ep_cid" => "[source][orig_ep_cid]"
        "orig_ep_source" => "[source][orig_ep_source]"
        "orig_ep_status" => "[source][orig_ep_status]"
        "orig_ep_uid" => "[source][orig_ep_uid]"
        "resp_ep_cid" => "[destination][resp_ep_cid]"
        "resp_ep_source" => "[destination][resp_ep_source]"
        "resp_ep_status" => "[destination][resp_ep_status]"
        "resp_ep_uid" => "[destination][resp_ep_uid]"  
      }
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-mutate-1e85f5a781ad-2023120101"
      }
      tag_on_failure => "_mutate_error-1e85f5a781ad-2023120101"
      id => "filter-mutate-1e85f5a781ad"
    }

    ruby {
      code => '
        value = event.get("local_orig")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[conn][local_orig]", value.to_s.strip.downcase)
        end
        value = event.get("local_resp")
        unless value.nil? || value.to_s.strip.empty?
          event.set("[conn][local_resp]", value.to_s.strip.downcase)
        end
      '
      add_field => {
        "[@metadata][etl][pipeline]" => "filter-ruby-22932ec888af-2023120101"
      }
      remove_field => [ "local_orig", "local_resp" ]
      tag_on_exception => "_rubyexception-22932ec888af-2023120101"
      tag_with_exception_message => true
      id => "filter-ruby-22932ec888af"
    }

    # [network[direction]
    # orig <> resp
    if [conn][local_orig] == "true" and [conn][local_resp] == "true" {
      mutate {
        add_field => {
          "[network][direction]" => "internal"
          "[@metadata][etl][pipeline]" => "filter-mutate-fc3794e003c1-2023120101"
        }
        remove_field => [ "temp_conn_local_orig", "temp_conn_local_resp"]
        tag_on_failure => "_mutate_error-fc3794e003c1-2023120101"
        id => "filter-mutate-fc3794e003c1"
      }
    }
    # orig > resp
    else if [conn][local_resp] == "true" and [conn][local_resp] == "false" {
      mutate {
        add_field => {
          "[network][direction]" => "outbound"
          "[@metadata][etl][pipeline]" => "filter-mutate-f36ee6e82f2f-2023120101"
        }
        remove_field => [ "temp_conn_local_orig", "temp_conn_local_resp"]
        tag_on_failure => "_mutate_error-f36ee6e82f2f-2023120101"
        id => "filter-mutate-f36ee6e82f2f"
      }
    }
    # orig < resp
    else if [conn][local_resp] == "false" and [conn][local_resp] == "true" {
      mutate {
        add_field => {
          "[network][direction]" => "inbound"
          "[@metadata][etl][pipeline]" => "filter-mutate-e068370de923-2023120101"
        }
        remove_field => [ "temp_conn_local_orig", "temp_conn_local_resp"]
        tag_on_failure => "_mutate_error-e068370de923-2023120101"
        id => "filter-mutate-e068370de923"
      }
    }
    # orig && resp == false
    else if [conn][local_resp] == "false" and [conn][local_resp] == "false" {
      mutate {
        add_field => {
          "[network][direction]" => "external"
          "[@metadata][etl][pipeline]" => "filter-mutate-698a844b4aec-2023120101"
        }
        remove_field => [ "temp_conn_local_orig", "temp_conn_local_resp"]
        tag_on_failure => "_mutate_error-698a844b4aec-2023120101"
        id => "filter-mutate-698a844b4aec"
      }
    }
    else {
      mutate {
        add_field => {
          "[network][direction]" => "unknown"
          "[@metadata][etl][pipeline]" => "filter-mutate-0741a33b17eb-2023120101"
        }
        remove_field => [ "temp_conn_local_orig", "temp_conn_local_resp"]
        tag_on_failure => "_mutate_error-0741a33b17eb-2023120101"
        id => "filter-mutate-0741a33b17eb"
      }
    }
      
    # Connection History
    if [network][connection][history] {
      ruby {
        code => "
          hist = event.get('[network][connection][history]')
          hist_dict = {
            '^' => 'connection direction was flipped by Zeekâ€™s heuristic',
            'a' => 'pure ACK',
            'c' => 'packet with a bad checksum',
            'd' => 'packet with payload data',
            'f' => 'packet with FIN bit set',
            'g' => 'a content gap',
            'h' => 'a SYN+ACK handshake',
            'i' => 'inconsistent packet (e.g. FIN+RST bits set)',
            'q' => 'multi-flag packet (SYN+FIN or SYN+RST bits set)',
            'r' => 'packet with RST bit set',
            's' => 'SYN with out ACK set',
            't' => 'packet with retransmitted payload',
            'w' => 'packet with a zero window advertisement'
          }
          hist = hist.split('')
          #hist = hist.uniq
          hist_client = ''
          hist_client_full = ''
          hist_server = ''
          hist_server_full = ''
          hist_full = ''
          for hist_value in hist
            if hist_value == hist_value.upcase
              dict_hist_full = hist_dict[hist_value.downcase]
              hist_client_full = hist_client_full + dict_hist_full + '. '
              hist_client = hist_client + hist_value
              hist_full = hist_full + dict_hist_full + '. '
            else
              dict_hist_full = hist_dict[hist_value]
              hist_server_full = hist_server_full + dict_hist_full + '. '
              hist_server = hist_server + hist_value
              hist_full = hist_full + dict_hist_full + '. '
            end
          end
          if !hist_client.empty?
            event.set('[source][connection_history]', hist_client)
            event.set('[source][connection_history_detailed]', hist_client_full)
          end
          if !hist_server.empty?
            event.set('[destination][connection_history]', hist_server)
            event.set('[destination][connection_history_detailed]', hist_server_full)
          end
          event.set('[network][connection][history_detailed]', hist_full)
        "
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-2113dda54151-2023120101"
        }
        tag_on_exception => "_rubyexception-2113dda54151-network_connection_history-2023120101"
        tag_with_exception_message => true
        id => "filter-ruby-2113dda54151"
      }
    }
    #Connection State enrichment
    if [network][connection][state] {
      translate {
        field => "[network][connection][state]"
        destination => "[network][connection][state_description]"
        dictionary => [
          "OTH", "No SYN seen, just midstream traffic (a partial connection that was not later closed)",
          "REJ", "Connection attempt rejected",
          "RSTO", "Connection established, source aborted (sent a RST)",
          "RSTOS0", "Source sent a SYN followed by a RST, never saw a SYN-ACK from the destination",
          "RSTR", "Established, destination aborted",
          "RSTRH", "Destination sent a SYN ACK followed by a RST, never saw a SYN from the (purported) source",
          "S0", "Connection attempt seen, no reply",
          "S1", "Connection established, not terminated",
          "S2", "Connection established and close attempt by source seen (but no reply from destination)",
          "S3", "Connection established and close attempt by destination seen (but no reply from source)",
          "SF", "Normal SYN/FIN completion",
          "SH", "Source sent a SYN followed by a FIN, never saw a SYN ACK from the destination (ie: connection was half open)",
          "SHR", "Destination sent a SYN ACK followed by a FIN, never saw a SYN from the source"
        ]
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-translate-2f1b7068ba50-2023120101"
        }
        id => "filter-ruby-2f1b7068ba50"
      }
    }

    # Add IP bytes so we can get totals
    if [source][ip_bytes] {
      ruby {
        code => "
          src = event.get('[source][ip_bytes]')
          dst = event.get('[destination][ip_bytes]')
          total = src + dst
          event.set('[network][ip_bytes]', total)
        "
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-d10b3b1ae673-2023120101"
        }
        tag_on_exception => "_rubyexception-d10b3b1ae673-network_ip_bytes-2023120101"
        tag_with_exception_message => true
        id => "filter-ruby-d10b3b1ae673"
      }
    }
    # Add bytes so we can get totals
    if [source][bytes] {
      ruby {
        code => "
          src = event.get('[source][bytes]')
          dst = event.get('[destination][bytes]')
          # Destination/Server bytes may not always exist, ie: broadcast
          if !dst.nil?
            total = src + dst
          else
            total = src
          end
          event.set('[network][bytes]', total)
        "
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-241f9cf34b1a-2023120101"
        }
        tag_on_exception => "_rubyexception-241f9cf34b1a-network_bytes-2023120101"
        tag_with_exception_message => true
        id => "filter-ruby-241f9cf34b1a"
      }
    }
    # Add packets so we can get totals
    if [source][packets] {
      ruby {
        code => "
          src = event.get('[source][packets]')
          dst = event.get('[destination][packets]')
          total = src + dst
          event.set('[network][packets]', total)
        "
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-3488320e9d77-2023120101"
        }
        tag_on_exception => "_rubyexception-3488320e9d77-network_packets-2023120101"
        tag_with_exception_message => true
        id => "filter-ruby-3488320e9d77"
      }
    }

    # Event duration
    if [event][duration] {
      ruby {
        code => '
          event_duration = event.get("[event][duration]")
          duration = event_duration.to_f * 1000000000
          event.set("[event][duration]", duration)
        '
        add_field => {
          "[@metadata][etl][pipeline]" => "filter-ruby-d0d976c3dae8-2023120101"
        }
        tag_on_exception => "_rubyexception-d0d976c3dae8-event.duration_to_nanoseconds-2023120101"
        tag_with_exception_message => true
        id => "filter-ruby-d0d976c3dae8"
      }
    }
    
  }
}
